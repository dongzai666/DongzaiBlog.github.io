[{"title":"matlab_experience","date":"2022-08-31T00:23:51.000Z","path":"2022/08/31/matlab-experience/","text":"Matlab语言基础 语言命名规则 由一个字母引导，后面可以为其他字符 区分大小写 Matlab的保留常量 eps,i,j,pi,inf(无穷),NaN(不定式),lastwarn,lasterr ans: 用于存储最近一次未赋值的运行结果 vpa：变精度求值，vpa(A),vpa(A,n) disp([‘xxxx ‘变量’ xx’]) 用于输出 num2str(),str2num() 数字字符串转化 Matlab支持的其他数据结构 字符串型数据，用单引号括起来 多维数据：是矩阵的直接扩展，多个下标 单元数据：将不同类型的数据集成到一个变量名下面，用{}表示 结构体：A.b，引用也用A.b，不是A-&gt;b 类与对象 Matlab的基本语句结构 直接赋值语句 矩阵： A = [1,2,3;4,5,6;7,8,0] 1.矩阵写在一行，用方括号括在一起 2.矩阵同行用空格或逗号隔开 注：1.clear all用于清除工作区中的变量 2. clc清除命令行内容 3. 语句末尾加；表示不输出内容，去掉分号表示输出内容 函数调用语句 [返回变量列表]=函数名（输入变量列表） [a,b,c] = myfun(d,e,f,g) 冒号表达式 v=s1:s2:s3 :从s1到s3，以步距s2生成一系列数 Linspace(a,b,n):生成从a到b的n个等间距点 子矩阵提取 格式：B=A(v1,v2) 冒号在逗号前表示提取所有行，逗号后表示所有列(逗号前是行号，逗号后是列号) 注：1.提取矩阵所有奇数行和所有列：B=A(1:2:end,:) 提取A矩阵的3，2，1行和2，3，4列构成矩阵：B=A([3,2,1],[2,3,4,]) A矩阵翻转:B=A(:,end:-1:1) 语言流程控制 循环结构 for结构123for i=V 循环结构体end i可以计数，也可以是向量，每次取一个值，循环次数为向量长度 while结构123while(条件式) 循环结构体end 转移结构 1234567if(条件1) 语句组 1elseif(条件2) 语句组2else(条件3) 语句组n+1end 开关结构 12345678switch 开关表达式case 表达式1 语句段1case &#123;表达式2，表达式3，表达式m&#125; 语句段2otherwise 语句段nend matlab 的开关与c语言有区别，可以有多个条件式，执行一个语句完成后自动结束，不需要break语句…… 试探结构 123try,语句段1,catch,语句段2,end 函数基本结构 12function [返回变量列表] = 函数名(输入变量列表) 注释说明语句段，由%引导 定义完的函数保存为同函数名的m文件，放置在Matlab的当前路径之下（或修改当前路径为m-函数文件所在路径），然后就和使用Matlab自带的函数一样，直接在命令窗口或程序代码中使用该函数就是调用它了。调用函数时，只需要知道函数是完成什么功能的，以及它的输入参数、输出参数。 函数调用的一般格式为： [输出实参表]=函数名(输入实参表) varargin 就是一个输入 变量，它可以是任意个不定个数的输入参数。要求：第一，指明它用小写的字母表示；第二，在函数的参数列表中，varargin放在最后面。 当函数执行时，varargin就是一个1 * n 的cell数组 varargout是一个元胞数组，用来存储输出参数。利用它的好处是输出参数的个数可变，可以根据情况改变输出参数的个数 13.inline函数，可以免去文件 函数名=inline(&#39;函数内容&#39;，自变量列表) * Matlab7.0 f=@(变量列表）函数内容","tags":[]},{"title":"win11","date":"2022-08-13T03:58:45.000Z","path":"2022/08/13/win11/","text":"今天心血来潮，想要换掉使用已久的win10系统入坑win11，所以记录一下系统升级遇到的一些问题 首先要进行系统硬件检查，看是否满足win11安装基本要求，一般来说，最近5年的电脑都满足该要求，只不过需要手动打开 TPM 功能（受信任的平台模块 (TPM) 2.0 版本），以惠普为例，步骤： * 重启电脑，通过hot键F9进入Blos界面 * 在“安全”选项卡上，检查 TPM 设备状态是否为“隐藏”。 * 将 TPM 设备状态切换为“可用”。 * 将 TPM 状态更改为“已启用”。 * 按 f10 退出，然后单击“是”保存更改。如果出现提示，请按 f1 确认更改并重新启动计算机。 &gt; 附录[windows系统监测工具](https://download.microsoft.com/download/d/5/9/d59a6828-52d9-4d08-a995-3c08cef7e802/3.7/x64/WindowsPCHealthCheckSetup.msi) 在系统更新中查看Microsoft是否有推送win11更新计划，有则直接点击下载即可，但是我的电脑并未推送，且系统更新显示 “此电脑当前不满足win11运行最低系统要求” ，虽然我的电脑已经符合要求，此时就只需要通过下载win11安装助手 即可 附录：Win11安装助手","tags":[{"name":"系统安装","slug":"系统安装","permalink":"http://example.com/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"}]},{"title":"python-技巧","date":"2022-04-28T01:39:27.000Z","path":"2022/04/28/python-技巧/","text":"本文主要记载一些Python编程过程中的代码优化技巧，让代码跟简洁优美同时执行效率更高,一下代码均经过实敲检验！ 声明：本文是参考其他博主的文章作以总结并加入自己的一些内容 话不多说，Let`s GO python中input()输入得到的数据类型都为str，也就是对数字进行判断的时候要进行转换–int(number) 处理用户的多个输入 Bad Code n1 = input(\"please input a number: \") n1 = input(\"please input a number: \") n1 = input(\"please input a number: \") Good Code 输入数字以空格分隔，或者在.split()中指定分隔符也可 n1,n2,n3 = input(\"please input three number:\").split() 处理多个条件语句 对于多个and语句可以用all()代替、多个or语句可以用any()代替 Bad Code 1234567name = &quot;apd&quot;age = 20school = &quot;NEU&quot; if name == &quot;apd&quot; and age == 20 and school == &quot;NEU&quot;: print(&quot;yes&quot;) if name == &quot;apd&quot; or age == 20 or school == &quot;NEU&quot;: print(&quot;no&quot;) Good Code 123456789conditions= [ name == &quot;apd&quot;, age == 20, school == &quot;NEU&quot; ] if all(conditions): print(&quot;yes&quot;) if any(conditions): print(&quot;no&quot;) 交换变量的值，在python中无需定义中间变量temp来进行值的交换，只需要按如下操作即可 Good Code a = 100 b = 200 a,b = b,a 对字符进行反转 Good Code string[::-1]即可，即需要反转字符串+[::-1] 拓展：判断字符串是否为回文串 string.find(string[::-1]) == 0 True为存在，False不存在 使用args传递多个参数*目测比较有用！ Bad Code def sum_of_squares(n1,n2): return n1^2+n2^2 Good Code def sum_of_squares(*args): return sum([item**2 for item in args]) 列表生成式（list comprehensions） 功能比较强大，具体使用时可深入学习 列表生成式结构[包含xx的表达式 for xx in yy if sss ] 即通过遍历yy中满足sss条件的值xx，执行包含xx的表达式来生成新的列表 简单演示 需求：字符串s1 ='ABC'，字符串 s2 = '123'，要求：生成序列 A1 A2 A3 C1 C2 C3 Bad Code 1234for i in s1: for j in s2: if i != &#x27;B&#x27;: lst.append(i+j) Good Code lst = [i+j for i in s1 for j in s2 if i!='B'] List专区 删除列表中的重复元素 不用去便利整个列表，可以通过set()来删除重复元素 Good Code lst = [1,2,3,3,5,7,8,7,8] print(lst) new_lst = list(set(lst)) print(new_lst) 找到list中重复最多的元素 使用max(list,key=list.count)来找到list中重复次数最多的元素 Good Code lst = [1,2,4,5,3,4,4,5,6,7,4] most_number_value = max(lst,key=lst.count) 拼接list中的元素 of course你可以指定拼接符号,通过join()函数来实现 &quot;拼接符号&quot;.join(拼接列表) Code lst = ['a','p','d'] new_lst = \"-\".join(lst) 使用两个list生成一个字典 通过zip功能来实现 Code keys = ['a','b','c'] values = [1,2,3] dct = dict(zip(keys,values)) 在循环中获得list值的下标，优雅简洁写法 Code idx是下标，item是对应值 123lst = [&quot;blue&quot;, &quot;lightblue&quot;, &quot;pink&quot;, &quot;orange&quot;, &quot;red&quot;] for idx, item in enumerate(lst): print(idx, item) Dict专区 合并两个字典 Code d1 = {\"v1\": 22, \"v2\": 33} d2 = {\"v2\": 44, \"v3\": 55} d3 = {**d1, **d2} print(d3) 按照字典的value值进行排序，具体其他用法可自行百度 Code d = { \"v1\": 80, \"v2\": 20, \"v3\": 40, \"v4\": 20, \"v5\": 10, } sorted_d = dict(sorted(d.items(), key=lambda item: item[1])) print(sorted_d)","tags":[{"name":"编程经验","slug":"编程经验","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/"}]},{"title":"python_tkinter","date":"2022-04-16T03:37:32.000Z","path":"2022/04/16/python-tkinter/","text":"Python学习之-UI(tkinter) tkinter是python自带的UI模块，可以跨平台运行，类似的Gui模块还有PyQt等，但上手难度较高，tkinter上手较容易，适合简单UI界面开发，一般的小demo也完全够用了，若想要进一步提升可视效果，可以通过tkinter的加强版本ttk来实现！后期可以拓展学习一下。 Tkinter 编写的程序，也称为 GUI 程序，GUI （Graphical User Interface）指的是“图形用户界面”，它是计算机图形学（CG）的一门分支，主要研究如何在计算机中表示图形，以及利用计算机进行图形的计算、处理和显示等相关工作","tags":[{"name":"编程语言","slug":"编程语言","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"python_class","date":"2022-03-17T13:08:49.000Z","path":"2022/03/17/python-class/","text":"Python学习之-类(calss) 本文主要记录下自己对python类相关知识的一些理解，平时也经常使用python来完成一些项目，不过由于没有像c/c++ 那样系统的学习，所以很多概念上存在模糊，此番重点钻研，记录所学 python用多了就会觉得python真香，有很多现成的库可以调用，不用像c/c++ 那样造轮子啦~ 话虽如此，各有长短，没有绝对哪一门语言更好的说法，只有哪个语言更适合！ 基础概念知识 python是面向对象的编程语言，而面向对象语言的最基本特征就是类和实例 理论解释 类：用于定义抽象的对象模型，它是描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。 类属性（类变量）：是该类的所有实例化对象所公用的，定义在类中且在函数体方法以外。通常不用做实例化对象。 实例属性（实例变量）：其值是当前实例化对象所特有的，所有实例化对象都有但值不一样，定义在**init()** 函数当中 方法：类中定义的函数。def（） 方法重写：如果从父类继承的方法（即函数）不能满足子类的需求，可以对其进行改写，该过程叫做方法的覆盖，也称作方法的重写。 实例化：创建一个类的具体对象的过程，类似于c语言中定义变量的过程。 实例：根据类定义的抽象模型创建出来的具体对象。 数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。 继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。 实例解释 问题：在我们定义一个关于“人”的个人信息的类 分析： 类属性：所有人都共有的且相同的信息如：国籍 实例属性：所有人都共有但不相同的信息如：姓名、性别、年龄 方法：用来打印出每个人信息的函数 实例化：用该类去定义一个具体的人 实例：用该类定义的这个具体的人就是一个实例 数据成员：初始化实例对象所需要的参数，即传入__init__()函数中的参数 继承：如果某一个人还具有其他额外的个人信息可通过继承“人”类来具有“人”类的所有方法属性，同时可进行额外扩展 方法重写：如果从基类“人”类中继承来的方法不能满足需求可对其进行改写 类属性和实例属性在类外和类内的调用：类内：1.类属性：直接使用 2.实例属性：self.实例属性名类外：1.类属性：类名.类属性名 2.实例属性：**实例名.实例属性名 实现 在Python中，类通过 class 关键字定义，类名通用习惯为首字母大写，Python3中类基本都会继承于object类，当然也可以不继承object类；两者区别不大，但没有继承于object类使用多继承时可能会出现问题。 123456789101112131415161718192021class Person(object): #object是继承的基类 address = &quot;国家&quot; #类属性 #类中的函数与一般函数的唯一区别是：第一个参数要加self(也可以是其他的名称，但一般统一用self)，self 代表类的实例，是通过类创建的实例！#__init__()函数中的name，sex，age都是数据成员 def __init__(self,name，sex，age): self.name = name #实例属性 self.sex = sex #实例属性 self.age = age #实例属性 def print_information(self): #该类定义的方法 print(self.name,&#x27;性别&#x27;,self.sex,&#x27;年龄&#x27;,self.age)if __name__ == &#x27;__main__&#x27;: 小明 = Person(&#x27;小明&#x27;,&#x27;男&#x27;,19) #实例化一个类对象，需要传入数据成员，因为当创建实例时，__init__() 方法会被自动调用为创建的实例增加实例属性。 小明.print_information() #调用类方法 Person.address = &#x27;xxxx&#x27; #改变类对象的值 关于if __name__ == &#39;__main__&#39;:用途的解释: 一个python文件通常有两种使用方法，1.是作为脚本直接执行，2. import 到其他的 python 脚本中被调用（模块重用）执行。 因此 if name == ‘main’: 的作用就是控制这两种情况执行代码的过程，在 if name == ‘main’: 下的代码只有在第一种情况下（即文件作为脚本直接执行）才会被执行，而 import 到其他脚本中是不会被执行的。 通俗来将就是在该行代码下的代码只有在当前文件作为主文件（类似与c语言中的main）时才会被执行，如果该文件作为模块被其他文件引用了，那么在其他文件中调用该文件时，这些代码时不会被执行滴！！！ 因为我们通常会在单独文件中写一些测试代码，这样通过该方法就可以避免作为模块时测试代码被执行的尴尬场面。。。 进阶知识 私有方法、属性的限制： 通过在方法、属性前加双下划线__来实现，此时它们只能在类内部调用，在类外部只能通过特殊机制调用，但我们不建议这么做，毕竟这样会违背我们将其定义为私有属性的初衷！ 特殊机制（提一嘴）：可以通过将方法/属性写成 _类名__xx(xx为属性/方法名)来调用如定义： __address = ‘国家’ 调用：Person._Person__adderss定义： __print_information() 调用：小明._Person__print_information() Python类中的@classmethod、@staticmethod 装饰方法 共同点：二者在使用时都不需要去实例化对象，可以直接通过类名来访问 不同点：@classmethod 用来修饰方法。使用在实例化前与类进行交互，但不和其实例进行交互的函数方法上。 @staticmethod 用来修饰类的静态方法。使用在有些与类相关函数，但不使用该类或该类的实例。如更改环境变量、修改其他类的属性等。 两者最明显的区别，classmethod 必须使用类的对象作为第一个参数，而staticmethod则可以不传递任何参数 一句话：@staticmethod 修饰的方法是放在类外的函数，我们为了方便将他移动到了类里面，它对类的运行无影响 实例：123456789101112131415161718192021222324252627class Date(object): day = 0 month = 0 year = 0 def __init__(self, year=0, month=0, day=0): self.day = day self.month = month self.year = year @classmethod def from_string(cls, date_as_string): year, month, day = date_as_string.split(&#x27;-&#x27;) date = cls(year, month, day) return date @staticmethod def is_date_valid(date_as_string): &quot;&quot;&quot; 用来校验日期的格式是否正确 &quot;&quot;&quot; year, month, day = date_as_string.split(&#x27;-&#x27;) return int(year) &lt;= 3999 and int(month) &lt;= 12 and int(day) &lt;= 31date1 = Date.from_string(&#x27;2012-05-10&#x27;)print(date1.year, date1.month, date1.day)is_date = Date.is_date_valid(&#x27;2012-09-18&#x27;) # 格式正确 返回True 注意：@staticmethod修饰方法 is_date_valid(date_as_string)中无实例化参数self或者cls；而@classmethod修饰的方法中有from_string(cls, date_as_string) 类参数cls。 @property 将类方法转换为只读属性（常用） 使用 property 的最简单的方法是将它作为装饰器来使用。这可以让你将一个类方法转变成一个类属性。 示例：1234567891011121314class Circle(object):__pi = 3.14def __init__(self, r): self.r = r@propertydef pi(self): return self.__picircle1 = Circle(2)print(circle1.pi)circle1.pi=3.14159 # 出现AttributeError异常 上面示例装饰了pi方法，创建实例后我们可以使用circle1.pi 自己获取方法的返回值，而且他只能读不能修改。 类的继承 继承的实现（继承最主要用处是提高代码的重用） 实现 12345678910111213class Animal(object): #父类：动物类--继承基类object def __init__(self,name,age): self.name = name self.age = age def call(self): print(selc.name,&#x27;会叫&#x27;)#定义子类喵喵类，继承自动物类,但多了属性性别class Cat(Animal): def __init__(self,name,sex,age): super(Cat,self).__init__(name,age) self.sex = sex 1.super(子类名,self).__init__(基类数据成员，不用加self)在派生类初始化的时候要加上，相当重要，否则，继承自 Animal的 Cat子类将没有 name和age两个属性。 2.函数super(Cat, self)将返回当前类继承的父类，即 Animal，然后调用__init__()方法，注意self参数已在super()中传入，在__init__()中将隐式传递，不能再写出self。 子类方法的重构 类方法的调用顺序，当我们在子类中重构父类的方法后，Cat子类的实例先会在自己的类 Cat 中查找该方法，当找不到该方法时才会去父类 Animal 中查找对应的方法。 所以对于需要重构的父类方法，我们只需要在子类中重新定义即可（函数名相同即可），然后在子类实例化时会自动覆盖！！ 示例： 12345class Cat(Animal): 省略 def call(self): printf(self.name,&#x27;会喵喵叫&#x27;) 多态 类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 Animal 派生出 Cat和 Dog，并都写了一个 call() 方法，如下示例： 123456789101112131415161718192021class Animal(object): def __init__(self, name, age): self.name = name self.age = agedef call(self): print(self.name, &#x27;会叫&#x27;)class Cat(Animal):def __init__(self, name, age, sex): super(Cat, self).__init__(name, age) self.sex = sexdef call(self): print(self.name, &#x27;会“喵喵”叫&#x27;)class Dog(Animal):def __init__(self, name, age, sex): super(Dog, self).__init__(name, age) self.sex = sexdef call(self): print(self.name, &#x27;会“汪汪”叫&#x27;) 我们定义一个 do 函数，接收一个变量 ‘all’,如下：123456789def do(all):all.call()A = Animal(&#x27;小黑&#x27;,4)C = Cat(&#x27;喵喵&#x27;, 2, &#x27;男&#x27;)D = Dog(&#x27;旺财&#x27;, 5, &#x27;女&#x27;)for x in (A,C,D):do(x) 输出结果： 123小黑 会叫喵喵 会“喵喵”叫旺财 会“汪汪”叫 多态解释 这种行为称为多态。也就是说，方法调用将作用在 all 的实际类型上。C 是 Cat 类型，它实际上拥有自己的 call() 方法以及从 Animal 继承的 call 方法，但调用 C .call() 总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。 传递给函数 do(all) 的参数 all 不一定是 Animal 或 Animal 的子类型。任何数据类型的实例都可以，只要它有一个 call() 的方法即可。其他类不继承于 Animal，具备 call 方法也可以使用 do 函数。这就是动态语言，动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用。","tags":[{"name":"编程语言","slug":"编程语言","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"CodeExperience","date":"2022-03-17T00:11:57.000Z","path":"2022/03/17/CodeExperience/","text":"Coding经验贴 本文主要记录一些coding过程中积累的零散小经验，实用性较强，同时也是为了防止遗忘，日积月累就会有质的提高 读起来可能会比较没有规律性，哈哈哈~ python之命令行运行代码文件 在终端通过 python 代码文件名.py 运行可以在python虚拟环境中运行，这样可以有效防止版本冲突！ 在python虚拟环境下跑代码用过的都说好 用啥环境就装啥，完全不用担心把主环境搞坏了！ 在python函数内试图改变全局变量的值会报错： 1local variable &#x27;xxx&#x27; referenced before assignment 解决办法：只需要在该函数内声明该变量为global，再行修改global xxxxxx = x 在python虚拟环境下跑代码用过的都说好 用啥环境就装啥，完全不用担心把主环境搞坏了！ 在安装一些模块的时候如果配置环境过程比较复杂，而直接pip install 模块行不通的时候，可以通过下载对应的 .whl文件通过pip install 文件路径\\xxx.whl来安装快捷简单，但前提是有对应的.whl文件 我在安装PyHook3的时候就遇到了此类问题，网上一堆教程配置繁琐且未成功，在github上找到对应的.whl即完成了安装，所有还是待好好利用github呀！ 如果运行某些程序代码时遇到提示缺少对应动态链接库xxx.dll情况，可直接去网上搜寻到对应文件，放置到对应位置即可 今天Get到了一个Vscode快捷键，相当nice ：alt + shift 可以实现单列复制效果，如果不理解，可以自己上手试试就晓得了 基础语法，pygame，tkinter，mysqlite 关于电脑桌面图标变白问题，解决方案文章,so-easy! 1、myfont = pygame.font.Font(None,60) # 返回一个字体对象 # 参数一： 取None表示使用系统默认字体，也可以是指定的具体名字 # 参数二： 字体的大小 2、textImage = my_font.render(text, antialias, color) # 在内存中绘制文本图片，并返回一个Surface对象 # 参数一： text： str, 文本内容 antialias： bool，是否将文本的锯齿形边缘变得光滑 color：（R,G,B), 文字颜色 3、screen.blit(textImage, (10, 100)) # 在坐标（10， 100）处展示textImage 关于pymssql模块安装失败问题，可以通过第三方 .whl文件来解决，但是呢，俺是在python虚拟环境下进行的，网上都说是在 python的Scripts文件夹下进行安装，而我按捺住稍微优点慌的心情，毕竟环境问题可不是闹的，但俺一想那俺是不是可以在虚拟环境下指定 .whl文件的路径就可以了呢，结果 —- 成功啦！！！ 1pip install D:\\PyMssql\\pymssql-2.1.5-cp36-cp36m-win_amd64.whl 关于文本处理 在生活中我们通常会遇到文本或数据不符合自己需求的情况，此时需要进行处理，多脏数据进行清理，以期达到我们的需求，此时通常会用到正则表达式 ^表示从每一段开头开始匹配 $表示匹配到每行行末 [0-9]表示数字 {重复出现的次数} [.]表示符号’.’ \\n 回车 .*? 可以表示任意字符 开头的有序序号，如1. 2. ~ 100.等Code ^[0-9]&#123;1&#125;[.]通过改变重复次数来消除所有序号 消除如v. xxxxx等Codev[.].*?$","tags":[{"name":"编程经验","slug":"编程经验","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/"}]},{"title":"Virtual_environment","date":"2022-03-15T17:36:58.000Z","path":"2022/03/16/Virtual-environment/","text":"创建pyhton虚拟环境 使用场景：对于python程序进行打包的时候，由于我们电脑安装了Anaconda或者过多的其他包导致打包生成的exe文件相当大，同时运行相应时间也较长！ 解决方案：在电脑上新建一python虚拟环境，专用于打包程序虚拟环境可以理解为是Python解释器的一个副本，在这个环境你可以安装私有包，而且不会影响系统中安装的全局Python解释器。虚拟环境非常有用，可以在系统的Python解释器中避免包的混乱和版本的冲突。【重要是不同虚拟环境可以搭建不同的python版本，创建时候选择】 详细 步骤 首先本地要有python环境，可以通过 可以在电脑左下角搜索【编辑系统环境变量】——【用户变量】——【PATH】中找到 创建虚拟环境包安装 12pip install virtualenvpip install virtualenvwrapper-win 创建虚拟环境 1mkvirtualenv -p=&quot;python环境所在路径\\python.exe&quot; 虚拟环境名称 此时我们虚拟环境已经创建好了，就是我们的对应环境名称 进入虚拟环境 workon 虚拟环境名 12G:\\项目测试文件夹\\NewAutogame&gt;workon pynew(pynew) G:\\项目测试文件夹\\NewAutogame&gt; 可以看到在当前目录前面有括号包围起来的虚拟环境名称，说明此时我们已成功切换 通过 pip list 可以查看当前虚拟环境已安装的依赖 123456(pynew) G:\\项目测试文件夹\\NewAutogame&gt;pip listPackage Version---------- -------pip 21.3.1setuptools 59.6.0wheel 0.37.1 然后运行代码，查看缺少哪些依赖，对应安装即可 运行代码 python 代码名.py安装依赖 pip install 依赖名 同时pyinstaller模块必须重新安装，文件才会缩小 退出虚拟环境 通过命令 deactivate 退出虚拟环境 123(pynew) G:\\项目测试文件夹\\NewAutogame&gt;deactivateG:\\项目测试文件夹\\NewAutogame&gt; 删除虚拟环境 要删除虚拟环境，直接删除虚拟环境所在的目录就可以了，注意不要将其它的环境给删了 本人虚拟环境在C:\\Users\\HP\\Envs下 PyInstaller模块的使用 PyInstaller是一个能将Python程序转换成单个可执行文件的程序，操作系统支持Windows, Linux, Mac OS X, Solaris和AIX。 并且很多包都支持开箱即用，不依赖环境。 代码pyinstaller -F -w -i ./xx.ico xxx.py 参数123456-i 给应用程序添加图标-F 指定打包后只生成一个exe格式的文件-D –onedir 创建一个目录，包含exe文件，但会依赖很多文件（默认项）-c –console, –nowindowed 使用控制台，无界面(默认)-w –windowed, –noconsole 使用窗口，无控制台-p 添加搜索路径 图标图片是 .ico 格式，可通过该网站转换，友情链接pyinstaller 详细学习可看此处 《py打包实战指南》 依赖安装、卸载及外部源加速问题 依赖安装 pip install 依赖名 最常用此方法，掌握此即可 依赖卸载 pip uninstall 依赖名 pip 版本升级 python -m pip install --upgrade pip==9.0.3 经常会出现PIP版本过低而无法安装依赖问题，只需升级pip版本即可！ 外部源使用 目的：解决依赖安装速度慢及安装失败问题 国内常用源列表 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple 中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple 阿里云 http://mirrors.aliyun.com/pypi/simple 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple 豆瓣 (douban) http://pypi.douban.com/simple 注意:关于–trusted-host（即host域名）部分，就取index-url中http(s):// 到第一个/之间的部分，请使用者自行对应提取 pip两种源的方式使用 安装时零时指定pip3 install sweetest -i https://pypi.tuna.tsinghua.edu.cn/simple 如果提示 host 不被信任可以加上参数 –trusted-hostpip3 install sweetest -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn","tags":[{"name":"环境搭建、经验","slug":"环境搭建、经验","permalink":"http://example.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%81%E7%BB%8F%E9%AA%8C/"}]},{"title":"前端CSS基础","date":"2022-02-23T14:50:50.000Z","path":"2022/02/23/前端css基础/","text":"前端三剑客之CSS 将前端比作人体，那么CSS就是人体的肌肉 CSS 是一种描述 HTML 文档样式的语言。CSS 描述应该如何显示 HTML 元素。 什么是 CSS？ CSS 指的是层叠样式表* (Cascading Style Sheets) CSS 描述了如何在屏幕、纸张或其他媒体上显示 HTML 元素 CSS 节省了大量工作。它可以同时控制多张网页的布局外部样式表存储在 CSS 文件中 CSS基础语法","tags":[{"name":"编程语言","slug":"编程语言","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"Markdown","date":"2022-02-22T15:01:13.000Z","path":"2022/02/22/Markdown语法/","text":"Markdown基础语法指南 前言：Markdown 语言使用相当广泛且语法简答易学，掌握它成为了程序员写作必备的技能,能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。 介绍：Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。Markdown 编写的文档后缀为 .md, .markdown。 Markdown 应用Markdown 能被使用来撰写电子书，如：Gitbook。 当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。 Markdown语法 标题语法 通过 ‘#’的多少来区分几级标题，文字与’#’间加空格 语法：# 一级标题 效果： 一级标题 语法：## 二级标题 效果： 二级标题 语法：### 三级标题 效果： 三级标题 段落语法 通过空行将段落分割，段落开头不要有空格/ 语法： 123这是一段文本这是第二段 效果： 这是一段文本 这是第二段 换行语法 在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行()。 几乎每个 Markdown 应用程序都支持两个或多个空格进行换行，称为 结尾空格（trailing whitespace) 的方式，但这是有争议的，因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个空格。由于这个原因，你可能要使用除结尾空格以外的其它方式来换行。幸运的是，几乎每个 Markdown 应用程序都支持另一种换行方式：HTML 的 br 标签。 为了兼容性，请在行尾添加“结尾空格”或 HTML 的 br 标签来实现换行 语法： 1第一行&lt;br&gt;第二行 效果： 第一行第二行 强调语法 在强调部分前后加两个’‘/‘_’无空格 效果加粗，在强调部分前后加一个’‘/‘_’无空格 效果斜体。 语法： 12**加粗效果1**__加粗效果2__ 效果： 加粗效果1 加粗效果2 语法： 12*斜体效果1*_斜体效果2_ 效果: 斜体效果1 斜体效果2 引用语法 通过在段落前加 ‘&gt;’ 来实现，同时块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。 语法：&gt;块引用在此 效果： 块引用在此 嵌套语法示例： 12&gt;* 嵌套引用1&gt;* 嵌套引用2 效果： 嵌套引用1 嵌套引用2 列表语法 有序列表是’数字+.+空格 文字’无序列表是”字符’*’/‘+’/‘-‘+空格 文字“ 语法： 12341. 有序列表12. 有序列表2* 无序列表1+ 无序列表2 效果： 有序列表1 有序列表2 无序列表1 无序列表2 代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符。 代码语法 在英文输入模式下 单行代码：通过一对反引号 ` 包围 多行代码： 通过一对三反引号 ``` 包围 语法： `单行code` 反引号x3 多行code1 多行code2 反引号x3 效果： 单行code 12多行code1多行code2 分割线语法 要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容 语法： *** --- ___ 效果： 以上三横线为分割线效果 链接语法 Markdown: [超链接显示名](超链接地址 超链接悬停显示文本)HTML: &lt;a href= 链接 ‘&gt;’超链接显示名’&lt;’/a&gt; 语法： [这是小东仔的个人博客](dongzai666.github.io 个人博客) 效果: 这是小东仔的个人博客 对于网址和email地址用&lt;&gt;包围起来可以变成可点击的链接 语法: &lt;https://dongzai666.github.io&gt; 效果：https://dongzai666.github.io 引用类型链接语法： 引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读 语法： 文中显示部分：[超链接显示文本][对应数字序号] 可放在文中任何位置(一般在末尾做注脚)的链接存贮部分: [对应数序号]: 链接 效果： [小东仔的个人博客][1] [1]: https://dongzai666.github.io 个人感觉没啥卵用，哈哈哈哈 图片链接 图片链接语法只需在超链接语法前加 感叹号’!’ 语法： ![图片名称](图片加载链接 图片悬停名称)效果: 给图片添加链接：将图片的markdown括在括号中，在后面添加圆括号包含的链接 语法： [![图片名称](图片加载链接 图片悬停名称)](图片超链接) 转义字符语法 要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \\ Markdown扩展语法指南 删除线语法 用’~~’包围起来，呈删除线效果 语法： ~~这是一段删除线效果文字~~ 效果：这是一段删除线效果文字 表格语法 使用 ‘|’ 分隔每列，使用’—‘控制每列的宽度,可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心。 ‘:—‘ 左对齐 ‘—:’ 右对齐 ‘:—:’ 居中对齐 语法： | id | name | address | |:--- | :----: | ---:| | 11 | apd | liaoning | 效果： id name address 11 apd liaoning :— :—: —: 任务列表语法 任务列表使您可以创建带有复选框的项目列表。在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号-和方括号[ ]，并在[ ]前面加上空格。要选择一个复选框，请在方括号[x]之间添加 x 。 语法：-[x] list1 效果：vscode暂时不支持该功能","tags":[{"name":"编码工具","slug":"编码工具","permalink":"http://example.com/tags/%E7%BC%96%E7%A0%81%E5%B7%A5%E5%85%B7/"}]},{"title":"前端基础--HTML","date":"2022-02-22T14:59:53.000Z","path":"2022/02/22/前端HTML基础/","text":"前端三剑客之HTML 将前端比作人体，那么HTML就是人体的骨架 本文主要记录自己初学前端HTML的一些基础语法及使用见解 官方解释：HTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。 关于前端编辑器有很多，本地比较推荐轻量化的VScode，插件种类繁多，功能强大，在线运行的话强推 https://jsbin.com/jodevezojo/edit?html,output 基本代码框架1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; &lt;title&gt;JS Bin&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 基础标签的使用 h1 ~ h6使用123&lt;h1&gt;我是一级标题 &lt;/h1&gt;&lt;h2&gt;我是二级标题 &lt;/h2&gt;&lt;h6&gt;我是六级标题 &lt;/h6&gt; 效果：我是一级标题 我是二级标题 我是六级标题 列表标签的使用12345678&lt;ul&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;列表无序&lt;/li&gt;&lt;/ul&gt;&lt;ol&gt; &lt;li&gt;有序列表&lt;/li&gt; &lt;li&gt;列表有序&lt;/li&gt;&lt;/ol&gt; 效果： 无序列表 列表无序 有序列表 列表有序 图片标签的使用 alt属性用于图片加载失败时提示文字 123456&lt;img width=&quot;100&quot; height=&quot;120&quot; src=&quot;https://pic.qqtn.com/up/2017-9/2017090616103913310.jpg&quot; alt=&quot;加载错误啦&quot; /&gt; 效果： 超链接标签的使用1&lt;a href=&quot;https://pic.qqtn.com/up/2017-9/2017090616103913310.jpg&quot;&gt;图片链接&lt;/a&gt; 效果：图片链接 p标签的使用 p标签功能相当强大，我们可以将整段文字放入其中 12&lt;p&gt;这是一段斜体文本,em标签可以斜体: &lt;em&gt; hello world &lt;/em&gt; &lt;/p&gt;&lt;p&gt;这是一段加粗文本，strong标签可以加粗: &lt;strong&gt; hello world &lt;/strong&gt; &lt;/p&gt; 效果： 这是一段斜体文本，em标签可以斜体： hello world 这是一段加粗文本，strong标签可以加粗： hello world 文本输入框标签input 基础款1&lt;input type=&quot;text&quot; /&gt; 效果： -·- 内有提示文字加强款1&lt;input type=&quot;text&quot; placeholder=&quot;请输入&quot;/&gt; 效果： -·- 复选框：改变type属性为checkbox1&lt;input type=&quot;checkbox&quot; /&gt;复选框 效果： -·- 文件按选择控件，属性file1&lt;input type=&quot;file&quot; /&gt; 效果： 功能相当强悍 -·- 单选框控件，属性radio1&lt;input type=&quot;radio&quot;/&gt; 效果： radio1radio2 5.1升级版本，通过加label 标签达到点击文字同样能够选中单选框的效果123&lt;label&gt; &lt;input type=&quot;radio&quot; id=&quot;radio /&gt; radio1&lt;/label&gt; 效果： radio1 -·- 拖动范围控件，属性range1&lt;input type=&quot;range&quot;/&gt; 效果： -·- 提交按钮控件，属性submit1&lt;input type=&quot;submit&quot;/&gt; 效果： 多行纯文本编辑控件1&lt;textarea name=&quot;story&quot; rols=9 cows=4&gt; this is a story &lt;/textarea&gt; 效果： this is a textarea","tags":[{"name":"编程语言","slug":"编程语言","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"git_operate","date":"2022-02-21T04:42:15.000Z","path":"2022/02/21/git-operate/","text":"Git基础操作指南 本教程是记录自己对git基础操作的一些理解 简介：Git是一款免费、开源的分布式版本控制系统，而github是一个远端仓库，通过git可以对github仓库进行管理，同时方便进行团队合作，共同开发项目 git status 查询当前文件夹git仓库状态，该命令比较常用，例如可以查看当前文件夹是否初始化 以及 提交历史信息 git init 初始化仓库，会在本地文件夹下生成一个 .git 文件 git add 将文件加入到本地暂存区，保存本地修改 git commit -m 提交描述信息 将本地暂存区中的所有文件 上传到与本地绑定的远端仓库中 git log 查询所有的commit信息 新建分支： git branch 分支名 创建一个‘分支名`的分支 git branch 可以查询当前所有分支 git checkout 分支 我们的所有操作都是基于分支的，在不同分支间进行切换需要用到此命令 git branch -b 分支 在创建新分支的同时切换到该分支，一次到位 删除分支： git branch -d 分支 当某一分支创建错误，或者该分支所有代码已经合并到master分支，此时该分支已失去价值，可通过此命令删除 git branch -D 分支 该命令是强制删除指定分支，场景为：需要删除某一分支，但此时该分支并未合并入主分支，执行上一命令会提示还有分支未合并，可用该命令强制删除 打标签：对于程序开发中会有 v.1 v.n 的区别，此时可以给对应的提交代码打标签 git tag 标签名 git tag 则可以查询历史tag记录 同理，在打完标签以后，可以通过标签回退程序 如：git checkout 标签 github远端相关操作 在电脑本地配置好Git环境后，我们就可以从远端仓库pull代码了，但是还不能向远端仓库push代码，因为我们需要将本机电脑同远端仓库建立联系，这时需要用到SSH： 那么什么是 SSH 呢？ 简单点说，SSH是一种网络协议，用于计算机之间的加密登录。目前是每一台 Linux 电脑的标准配置。而大多数 Git 服务器都会选择使用 SSH 公钥来进行授权，所以想要在 GitHub 提交代码的第一步就是要先添加 SSH key 配置。 通过SSH与远端仓库建立联系：Linux 与 Mac 都是默认安装了 SSH ，而 Windows 系统安装了 Git Bash 应该也是带了 SSH的。 在终端输入 ssh-keygen -t rsa 就是指定 rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公钥。这两文件默认分别在如下目录里生成：向GitHub 提交代码 Linux/Mac 系统 在 ~/.ssh 下，win系统在 /c/Documents and Settings/username/.ssh 下，都是隐藏文件。 把 id_rsa.pub 的内容添加到 GitHub 上，这样你本地的 id_rsa 密钥跟 GitHub上的 id_rsa.pub 公钥进行配对，授权成功才可以提交代码 pull/push 代码： ‘git pull 远程主机名称 远程分支名称：本地分支名称` 从远端仓库拉下来到本地分支 git push 远程主机名称 本地分支名称：远程分支名称 将本地分支代码推到远程分支上去 一般来说我们远程分支名称与本地分支名称保持一致，便捷些 一般为了防止产生冲突，我们强调先pull再push 删除远程某分支：git push 远程主机名 ：远程分支 原理是向远端分支提交一个空的分支覆盖掉，就相当于删除了该远端分支 上面提到的远程主机名，即我们对远程仓库的命名，如果不指定则默认 origin ,可以通过以下三种方式修改远程主机名： 克隆仓库时：git clone -o 远程主机名 仓库网址 指定本地生成文件夹名称 克隆仓库会在本地生成指定名称的文件夹，该文件夹已经初始化完毕 给已经初始化(git init)后的文件夹添加远程仓库： git remote add 远程主机名 仓库网址 直接更名：git remote rename 原主机名 新主机名 git remote 系列命令是对远程主机进行的操作，下面会有详细讲解 远程仓库网址命名规则： https: https://github.com/用户名/项目名.git ssh: git@github.com:用户名/项目名.git .git 可以省略 git信息的全局配置 ：git config --glob xxx git config —global user.name “stormzhang” git config —global user.email “&#115;&#116;&#111;&#x72;&#109;&#x7a;&#104;&#x61;&#x6e;&#x67;&#46;&#100;&#x65;&#118;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;“ 简化命令：git config --glob alias.别名 原来命令 例:git config –global alias.co checkout # 别名 一个比较屌的命令，用于美化日志查询 git config --global alias.lg &quot;log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative&quot; 为了便于管理，Git要求每个远程主机都必须指定一个主机名，git remote 系列命令就用于对远程主机进行操作： git remote 用于查看与该文件夹关联的所有远程主机名 git remote 同时查看主机名及网址 git remote show 主机名 列出所有关联主机的详细信息 git remote rm 主机名 用于删除远程主机 还有上面提到的若干 查看文件改动：git diff 直接输入 git diff 只能比较当前文件和暂存区文件差异 git diff &lt;$id1&gt; &lt;$id2&gt; # 比较两次提交之间的差异 git diff .. # 在两个分支之间比较 git diff –staged # 比较暂存区和版本库差异 stash 中文释义：暂存区 对于这个命令向来大家是比较模糊的，不太清楚它的使用场景设想一个场景，假设我们正在一个新的分支做新的功能，这个时候突然有一个紧急的bug需要修复，而且修复完之后需要立即发布。当然你说我先把刚写的一点代码进行提交不就行了么？这样理论上当然是ok的，但是这会产品垃圾commit，原则上我们每次的commit都要有实际的意义，你的代码只是刚写了一半，还没有什么实际的意义是不建议就这样commit的，那么有没有一种比较好的办法，可以让我暂时切到别的分支，修复完bug再切回来，而且代码也能保留的呢？这个时候 stash 命令就大有用处了，前提是我们的代码没有进行 commit ，哪怕你执行了add 也没关系 执行： git stash 这样就会将暂时没有commit 的代码暂存起来，这时我们进行分支切换也就没有任何问题了 git stash list 查看暂存记录 当你把所有bug解决后就可以通过如下命令恢复，然后切换灰来继续做之前没做完的功能 git stash apply 将暂存区还原 git stash drop stash_id(可选，删除指定记录) 将之前最近的一次暂存记录删除， git stash pop 还原暂存区＋删除最近一次暂存记录 git stash clear 清空所有暂存区的记录 merge &amp; rebase 我们知道 merge 分支是合并的意思，我们在一个 featureA 分支开发完了一个功能，这个时候需要合并到主分支 master 上去，我们只需要进行如下操作： 12git checkout mastergit merge/rebase featureA rebase 和 merge 的区别 rebase 跟 merge 的区别你们可以理解成有两个书架，你需要把两个书架的书整理到一起去，第一种做法是 merge ，比较粗鲁暴力，就直接腾出一块地方把另一个书架的书全部放进去，虽然暴力，但是这种做法你可以知道哪些书是来自另一个书架的；第二种做法就是rebase ，他会把两个书架的书先进行比较，按照购书的时间来给他重新排序，然后重新放置好，这样做的好处就是合并之后的书架看起来很有逻辑，但是你很难清晰的知道哪些书来自哪个书架的。 也就是 经merge合并后的分支记录并不是只有主干一条，像小河流汇入大河一样，主干分支清晰可见，而经rebase 合并后的分支记录只有主干一条，分支是不可见的，所有分支按时间顺序汇入主干中。 总结：merge 来路可循但时间节点较乱，rebase时间节点清晰但来路不明 解决冲突：有conflit的时候git会智能提示，冲突的地方由 ==== 分出了上下两个部分，上部分一个叫HEAD 的字样代表是我当前所在分支的代码，下半部分是一个叫 baidu_activity 分支的代码，可以看到 HEAD 对 gradle 插件进行了升级，同时新增了一个插件，所以我们很容易判断哪些代码该保留，哪些代码该删除，我们只需要移除掉那些老旧代码，而且同时也要把那些&lt;&lt;&lt; HEAD、==== 以及 &gt;&gt;&gt;&gt;&gt;&gt;baidu_activity 这些标记符号也一并删除，最后进行一次commit 就ok了。 2022.3.22 更新 关于git commit 以及 git add 后的撤销问题 撤销命令：git reset 首先对于仓库的第一次commit提交,通过以下命令撤销 git update-ref -d HEAD 对于大于灯与两次的提交可通过三种方式达到对 commit 、add 的不同撤销方式 格式: git reset 参数 HEAD回撤次数 参数： –soft ：仅撤回commit操作，保留 add 和本地工作区代码 –mixed(默认) : 同时撤回 commit 和 add操作，保留本地工作区代码 –hard : 将commit 、add 以及本地工作区代码都重置，即清空暂存区和工作区 HEAD回撤次数： HEAD^ 回撤一次 HEAD~1 回撤一次 HEAD~2 回撤两次 commit id 回撤到对应id版本次commit 查询commit id 通过git log即可查看，黄色段字符极为commit id git status 可以查看本地区和暂存群的文件 123456789101112131415161718192021$ git statusOn branch masterNo commits yetChanges to be committed: (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage) new file: Autogame.py new file: r.ico------------手动分割，以上为暂存区，以下为本地区未add文件-----------Untracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) Autogame.spec NewAutogame.spec NewGame.zip NewGame/ R.png __pycache__/ build/ 如果我们此时想要查看 commit 的文件，可以通过git show commit_id来查看哦 参考文章：https://www.jianshu.com/p/c2ec5f06cf1a 2022.7.02更新 git fresh ：该命令用于从远程获取代码库，告诉 Git 去获取它有你没有的数据，然后你可以通过执行 git merge 来实现将更新数据合并到你的分支的操作。 git push 主机 本地分支:远端分支 -f :实现对远端分支的强制合并 git branch -a : 查看远端分支名称","tags":[{"name":"编码工具","slug":"编码工具","permalink":"http://example.com/tags/%E7%BC%96%E7%A0%81%E5%B7%A5%E5%85%B7/"}]},{"title":"vim_operate","date":"2022-02-12T03:44:56.000Z","path":"2022/02/12/vim-operate/","text":"Vim基础操作指南 本文主要是介绍Vim的基本操作，不过当你能熟练使用这些操作以后，你的代码编写效率绝对会飞起，当然最后我也会介绍一些进阶读物，方便对VIm感兴趣的读者进一步了解。 写在前面：个人感觉 vscode + vim 绝配，yyds 1.移动光标 检查键盘是否为英文输入，且大写未锁定 基本操作： h左 j下 k上 l右 number+’w’ 将光标向前移动number个单词 number+’e’ 功能同上 数字0将光标移动到当前行首 ‘e’和’w’区别： ‘w’ 将光标从当前位置移动到下一个单词起始，且不包括起始字符 ‘e’ 将光标从当前位置移动到当前单词末尾 个人感觉具体使用时区别不会太大。。 2.Vim的保存和退出 键可以切换Vim的状态，从编辑状态切换到正常状态，然后输入 :q!不保存强制退出 :wq保存并退出 通过 vim + 文件名 + 回车便可以通过vim打开对应文件 3.文本编辑之删除 该操作在normal模式下 通过 ‘x’来删除掉光标所在字符 通过 ‘dd’ 来删除光标当前所在整行 通过 ‘dw’ 从光标处删除到一个单词的词末 通过 ‘d$’ 删除当前光标到行末 此处可以观察到 操作+操作对象 的使用规则，通过后面的计数操作，功能会更加强大，即 操作+number+操作对象 ‘d3w’删除三行 ‘2dd’ 删除两行 类比如上… 4.文本编辑之插入 以下操作均会进入编辑模式 通过 ‘i’在光标所在字母前面插入 通过 ‘a’在光标所在字母后面插入 通过 ‘A’在当前行的最后进行插入，此时光标在何位置并不重要 通过小写 ‘o’在当前光标的下一行插入，此时Vim进入编辑模式 通过大写 ‘O’在当前光标的上一行插入，此时VIm进入编辑模式 友情提示：键除了能带你会normal模式外，还能撤销一个你不想输入或者部分完整的命令 5.撤销类命令 ‘u’撤销最后执行的命令 ‘U’撤销对一行的操作 撤销以前的撤销命令，则通过 Ctrl+R 6.置入类命令 ‘p’可以配合删除命令来使用，该操作可以将已删除的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置于当前光标所在行的下一行。 7.替换+更改类命令 ‘r’和一个字符可以替换当前光标所在位置的字符，该操作只能一个一个替换 ‘R’可以连续替换多个字符，通过＜ＥＳＣ＞结束 ‘c’+对象 可以实现连续替换 ce 改变文本直到一个单词的末尾 同样也可以 ‘c’+number+motion 使用 查找替换： 只在当前行查找替换： :s/old/new 该命令只替换当前行的第一个old :s/old/new/g 该命令对当前行内的所有old进行替换 :s/old/new/gc 该命令对当前行内的所有old进行替换并询问，需要确认 在全文进行查找替换： 类比&lt;1&gt;，只需在’s’前加 ‘%’ :%s/old/new 只替换全文中的第一个old :%s/old/new/g 替换全文中的所有old :%s/old/new/gc 替换全文中的所有old并问询 8.定位及文件状态 Ctrl+g 组合键可以查看当前光标所在行的行号及文件状态信息 gg 可以跳转到第一行 G 可以跳转到文件最后一行 行号 + G 则可以跳转到指定行 9.搜索类命令 正向查找：输入 ‘/‘ (类似于’:’命令) ，然后输入 ’待查找字符串‘ ,回车即可 逆向查找：输入 ‘?’+’待查找字符串’,回车即可 上面两种情况连续查找： 若连续同上次方向查找则输入’n’,即正向查找下’n’为向下搜索，逆向查找下为向上搜索 若连续逆上次方向查找则输入’N’,即正向查找下’N’为向上搜索，逆向查找下为向下搜索 个人认为这两种用好一种就行了，容易混淆 10.配对括号的查找 输入 ‘%’ 可以配对 ）、 ]、} 在Vim内执行外部命令 ‘:!’+外部命令 便可以在Vim中执行外部命令 例如 ‘:!ls’ 便可以查看当前vim文件同目录下的文件列表 使用外部命令进行文件输出保存/读取写入 ‘v’命令可以使vim进入可视选取状态 ‘:w filname’可以将选中字段保存到 filename 文件中，可搭配 ‘v’命令使用 ‘:r filename’可以将外部filename中的内容写入到当前光标后面 例如 ‘:r !ls’ 可以将当前路径下的所有文件目录写入到光标后面 13.复制粘贴文本 通过 ‘y’ 复制文本， ‘p’粘贴文本 可搭配 ‘v’命令使用 ，如同前面所说，单独使用 ‘p’命令将粘贴最后一次删除文本到当前光标所在下一行 14.设置类命令选项： 输入 ‘:set xxx’ 可以设置xxx选项 ‘ic’ ‘ignorecase’ 查找时忽略字母大小写 ‘is’ ‘incsearch’ 查找短语时显示部分匹配 ‘hls’ ‘hlsearch’ 高亮显示所有的匹配短语 选项名可以用完整版本，也可以用缩略版本。 在选项前加上 no 可以关闭选项： :set noic 15.关于组合键命令的小结 ctrl + g 显示当前光标所在行号及文件状态 ctrl + D / 键进行自动补全 ctrl + o 返回光标上次所在位置，可多次返回","tags":[{"name":"编码工具","slug":"编码工具","permalink":"http://example.com/tags/%E7%BC%96%E7%A0%81%E5%B7%A5%E5%85%B7/"}]},{"title":"github+hexo 个人博客搭建","date":"2022-01-30T03:14:50.000Z","path":"2022/01/30/hexoblog/","text":"Hexo静态网页博客搭建及实现多平台同步 该网站基于市面上流行的NodeJs框架下的Hexo，托管于github，实现了一个个人博客的基本功能，本文主要讲解在linux平台下搭建hexo环境的主要步骤以及在不同平台（如想同时在windows、linux下发布、管理博客内容的工作场景）同步内容的解决方案！ 前置内容 linux基本命令的使用 Git命令行的使用及功能 博客网站搭建–环境配置参考链接1 在搭建Hexo环境前需要配置本地环境，主要有： Nodejs ：需要注意其版本，建议安装至最新版本，否则会出现报错 命令行安装： sudo apt install nodejs,ubuntu默认安装版本8.10，其他安装方法可自行百度 版本查询：Node -v 版本更新：通过安装Node工具包n来实现 安装n sudo npm install n -g 安装最新稳定nodejs sudo n stable npm ：sudo apt install npm git : sudo apt install git 博客网站搭建–实现步骤参考链接2 当前期需要环境准备好以后，配置hexo环境就相当简单了，使用命令： sudo nmp install hexo-cli -g 然后在本地新建一个文件夹，通过hexo init 本地文件夹路径在指定文件夹生成文件体系，需要我们自定义的文件夹如下： source/_posts 文件夹下存放.md 格式的博客文章 themes 文件夹下存放主题 可以去github克隆喜欢的主题到该目录下，然后通过修改 _config.yaml 中 theme 字段为克隆主题生效！ 接下来就是将我们的网站挂载到github仓库上，这样任何人就能通过我们的网址来访问我们的网站了 首先创建名为xxx.github.io的github仓库，以后就可以通过 xxx.github.io 的网址来访问了 通过如下命令来关联本地markdown文件与远端github仓库1npm install hexo-deployer-git --save 打开配置文件_config.yml 配置git123deploy:type: gitrepo: https://github.com/xxx/xxxx.github.io.git 可以给自己的博客加上评论功能，这样会高逼格一点 可以在畅言网站上免费注册z-blog功能，获取到appid 和 appsecret进入你的themes/对应主题,打开_config.yml，定位到 changyan ，把 enable 改为 true。 然后是修改如下1234changyan:enable: trueappid: 这里写上你的畅言在appidappkey: 这里写上你的畅言在appkey 最后是通过以下命令实现本地刷新并上传到远程仓库 网站修改后刷新生效命令123hexo clean #清除本地原缓冲文件 hexo g #生成新网站，刷新 generatehexo s #启动服务器 server 部署网站到远端 1hexo d #deploy部署 博客网站搭建–部署报错 报错信息如下：12345678910penSSL SSL_read: Connection was reset, errno 10054FATAL &#123; err: Error: Spawn failed at ChildProcess.&lt;anonymous&gt; (F:\\Blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21) at ChildProcess.emit (node:events:390:28) at ChildProcess.cp.emit (F:\\Blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29) at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123; code: 128 &#125;&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html 在最后一部hexo d时出现以上的错误，不要怀疑，是GitHub的服务器出毛病了！！！多尝试几次就欧克。* 博客网站搭建–多端同步 解决方案，使用GitHub的分支！在博客对应的仓库中新建一个分支。一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页,通过在不同平台拉取实现资源文件同步。 分支master：静态网页资源 分支sync：网站原始文件 在github网页端创建基于master的分支sync(此时sync的文件同master完全一致)，将本地生成网站原始文件转移至其他文件夹，防止待会pull时被覆盖 Git操作 git init 初始化文件夹，生成.git文件 git remote add origin https://github.com/dongzai666/dongzai666.github.io.git 链接远程仓库 git pull origin sync:master 将sync分支内容拉下来，与本地建立链接，然后删除除了.git以外的所有文件 将转移的网站原始文件复制回来，修改.gitignore文件，避免上传一些不需要的文件，内容如下： 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传 通过git push origin master:sync -f 强制覆盖远端sync分支的内容 此时就实现了远端master分支存放生成的静态网页，sync分支用来存放网站原始文件的目的！！！ 在新设备上将该仓库sync分支克隆下来 git clone -b sync https://github.com/dongzai666/dongzai666.github.io.git Blog 此时新设备不需要再hexo init了，此时只需npm install即可安装所需要的环境，同时别忘了关联本地markdown文件和github仓库，命令：npm install hexo-deployer-git --save 7.到这一步后 其他博客更新、管理操作同原来一致，只需要在每次修改博客内容后将源文件及时同步到仓库中即可！其他设备只需要在编辑前进行pull操作～","tags":[{"name":"环境搭建、经验","slug":"环境搭建、经验","permalink":"http://example.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%81%E7%BB%8F%E9%AA%8C/"}]}]