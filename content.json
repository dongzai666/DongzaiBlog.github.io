[{"title":"Markdown","date":"2022-02-22T15:01:13.000Z","path":"2022/02/22/Markdown语法/","text":"Markdown基础语法指南 前言：Markdown 语言使用相当广泛且语法简答易学，掌握它成为了程序员写作必备的技能 介绍：Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。Markdown 编写的文档后缀为 .md, .markdown。 Markdown 应用Markdown 能被使用来撰写电子书，如：Gitbook。 当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。","tags":[{"name":"编码工具","slug":"编码工具","permalink":"http://example.com/tags/%E7%BC%96%E7%A0%81%E5%B7%A5%E5%85%B7/"}]},{"title":"前端基础--HTML","date":"2022-02-22T14:59:53.000Z","path":"2022/02/22/前端HTML基础/","text":"前端三剑客之HTML 将前端比作人体，那么HTML就是人体的骨架 本文主要记录自己初学前端HTML的一些基础语法及使用见解 官方解释：HTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。 关于前端编辑器有很多，本地比较推荐轻量化的VScode，插件种类繁多，功能强大，在线运行的话强推 https://jsbin.com/jodevezojo/edit?html,output 基本代码框架1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; &lt;title&gt;JS Bin&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 基础标签的使用 h1 ~ h6使用123&lt;h1&gt;我是一级标题 &lt;/h1&gt;&lt;h2&gt;我是二级标题 &lt;/h2&gt;&lt;h6&gt;我是六级标题 &lt;/h6&gt; 效果：我是一级标题 我是二级标题 我是六级标题 列表标签的使用12345678&lt;ul&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;列表无序&lt;/li&gt;&lt;/ul&gt;&lt;ol&gt; &lt;li&gt;有序列表&lt;/li&gt; &lt;li&gt;列表有序&lt;/li&gt;&lt;/ol&gt; 效果： 无序列表 列表无序 有序列表 列表有序 图片标签的使用 alt属性用于图片加载失败时提示文字 123456&lt;img width=&quot;100&quot; height=&quot;120&quot; src=&quot;https://pic.qqtn.com/up/2017-9/2017090616103913310.jpg&quot; alt=&quot;加载错误啦&quot; /&gt; 效果： 超链接标签的使用1&lt;a href=&quot;https://pic.qqtn.com/up/2017-9/2017090616103913310.jpg&quot;&gt;图片链接&lt;/a&gt; 效果：图片链接 p标签的使用 p标签功能相当强大，我们可以将整段文字放入其中 12&lt;p&gt;这是一段斜体文本,em标签可以斜体: &lt;em&gt; hello world &lt;/em&gt; &lt;/p&gt;&lt;p&gt;这是一段加粗文本，strong标签可以加粗: &lt;strong&gt; hello world &lt;/strong&gt; &lt;/p&gt; 效果： 这是一段斜体文本，em标签可以斜体： hello world 这是一段加粗文本，strong标签可以加粗： hello world 文本输入框标签input 基础款1&lt;input type=&quot;text&quot; /&gt; 效果： -·- 内有提示文字加强款1&lt;input type=&quot;text&quot; placeholder=&quot;请输入&quot;/&gt; 效果： -·- 复选框：改变type属性为checkbox1&lt;input type=&quot;checkbox&quot; /&gt;复选框 效果： -·- 文件按选择控件，属性file1&lt;input type=&quot;file&quot; /&gt; 效果： 功能相当强悍 -·- 单选框控件，属性radio1&lt;input type=&quot;radio&quot;/&gt; 效果： radio1radio2 5.1升级版本，通过加label 标签达到点击文字同样能够选中单选框的效果123&lt;label&gt; &lt;input type=&quot;radio&quot; id=&quot;radio /&gt; radio1&lt;/label&gt; 效果： radio1 -·- 拖动范围控件，属性range1&lt;input type=&quot;range&quot;/&gt; 效果： -·- 提交按钮控件，属性submit1&lt;input type=&quot;submit&quot;/&gt; 效果： 多行纯文本编辑控件1&lt;textarea name=&quot;story&quot; rols=9 cows=4&gt; this is a story &lt;/textarea&gt; 效果： this is a textarea","tags":[{"name":"编程语言","slug":"编程语言","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"git_operate","date":"2022-02-21T04:42:15.000Z","path":"2022/02/21/git-operate/","text":"Git基础操作指南 本教程是记录自己对git基础操作的一些理解 简介：Git是一款免费、开源的分布式版本控制系统，而github是一个远端仓库，通过git可以对github仓库进行管理，同时方便进行团队合作，共同开发项目 git status 查询当前文件夹git仓库状态，该命令比较常用，例如可以查看当前文件夹是否初始化 以及 提交历史信息 git init 初始化仓库，会在本地文件夹下生成一个 .git 文件 git add 将文件加入到本地暂存区，保存本地修改 git commit -m 提交描述信息 将本地暂存区中的所有文件 上传到与本地绑定的远端仓库中 git log 查询所有的commit信息 新建分支： git branch 分支名 创建一个‘分支名`的分支 git branch 可以查询当前所有分支 git checkout 分支 我们的所有操作都是基于分支的，在不同分支间进行切换需要用到此命令 git branch -b 分支 在创建新分支的同时切换到该分支，一次到位 删除分支： git branch -d 分支 当某一分支创建错误，或者该分支所有代码已经合并到master分支，此时该分支已失去价值，可通过此命令删除 git branch -D 分支 该命令是强制删除指定分支，场景为：需要删除某一分支，但此时该分支并未合并入主分支，执行上一命令会提示还有分支未合并，可用该命令强制删除 打标签：对于程序开发中会有 v.1 v.n 的区别，此时可以给对应的提交代码打标签 git tag 标签名 git tag 则可以查询历史tag记录 同理，在打完标签以后，可以通过标签回退程序 如：git checkout 标签 github远端相关操作 在电脑本地配置好Git环境后，我们就可以从远端仓库pull代码了，但是还不能向远端仓库push代码，因为我们需要将本机电脑同远端仓库建立联系，这时需要用到SSH： 那么什么是 SSH 呢？ 简单点说，SSH是一种网络协议，用于计算机之间的加密登录。目前是每一台 Linux 电脑的标准配置。而大多数 Git 服务器都会选择使用 SSH 公钥来进行授权，所以想要在 GitHub 提交代码的第一步就是要先添加 SSH key 配置。 通过SSH与远端仓库建立联系：Linux 与 Mac 都是默认安装了 SSH ，而 Windows 系统安装了 Git Bash 应该也是带了 SSH的。 在终端输入 ssh-keygen -t rsa 就是指定 rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公钥。这两文件默认分别在如下目录里生成：向GitHub 提交代码 Linux/Mac 系统 在 ~/.ssh 下，win系统在 /c/Documents and Settings/username/.ssh 下，都是隐藏文件。 把 id_rsa.pub 的内容添加到 GitHub 上，这样你本地的 id_rsa 密钥跟 GitHub上的 id_rsa.pub 公钥进行配对，授权成功才可以提交代码 pull/push 代码： ‘git pull 远程主机名称 远程分支名称：本地分支名称` 从远端仓库拉下来到本地分支 git push 远程主机名称 本地分支名称：远程分支名称 将本地分支代码推到远程分支上去 一般来说我们远程分支名称与本地分支名称保持一致，便捷些 一般为了防止产生冲突，我们强调先pull再push 删除远程某分支：git push 远程主机名 ：远程分支 原理是向远端分支提交一个空的分支覆盖掉，就相当于删除了该远端分支 上面提到的远程主机名，即我们对远程仓库的命名，如果不指定则默认 origin ,可以通过以下三种方式修改远程主机名： 克隆仓库时：git clone -o 远程主机名 仓库网址 指定本地生成文件夹名称 克隆仓库会在本地生成指定名称的文件夹，该文件夹已经初始化完毕 给已经初始化(git init)后的文件夹添加远程仓库： git remote add 远程主机名 仓库网址 直接更名：git remote rename 原主机名 新主机名 git remote 系列命令是对远程主机进行的操作，下面会有详细讲解 远程仓库网址命名规则： https: https://github.com/用户名/项目名.git ssh: git@github.com:用户名/项目名.git .git 可以省略 git信息的全局配置 ：git config --glob xxx git config —global user.name “stormzhang” git config —global user.email “&#x73;&#116;&#111;&#x72;&#109;&#122;&#104;&#x61;&#110;&#103;&#46;&#x64;&#x65;&#118;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#109;“ 简化命令：git config --glob alias.别名 原来命令 例:git config –global alias.co checkout # 别名 一个比较屌的命令，用于美化日志查询 git config --global alias.lg &quot;log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative&quot; 为了便于管理，Git要求每个远程主机都必须指定一个主机名，git remote 系列命令就用于对远程主机进行操作： git remote 用于查看与该文件夹关联的所有远程主机名 git remote 同时查看主机名及网址 git remote show 主机名 列出所有关联主机的详细信息 git remote rm 主机名 用于删除远程主机 还有上面提到的若干 查看文件改动：git diff 直接输入 git diff 只能比较当前文件和暂存区文件差异 git diff &lt;$id1&gt; &lt;$id2&gt; # 比较两次提交之间的差异 git diff .. # 在两个分支之间比较 git diff –staged # 比较暂存区和版本库差异 stash 中文释义：暂存区 对于这个命令向来大家是比较模糊的，不太清楚它的使用场景设想一个场景，假设我们正在一个新的分支做新的功能，这个时候突然有一个紧急的bug需要修复，而且修复完之后需要立即发布。当然你说我先把刚写的一点代码进行提交不就行了么？这样理论上当然是ok的，但是这会产品垃圾commit，原则上我们每次的commit都要有实际的意义，你的代码只是刚写了一半，还没有什么实际的意义是不建议就这样commit的，那么有没有一种比较好的办法，可以让我暂时切到别的分支，修复完bug再切回来，而且代码也能保留的呢？这个时候 stash 命令就大有用处了，前提是我们的代码没有进行 commit ，哪怕你执行了add 也没关系 执行： git stash 这样就会将暂时没有commit 的代码暂存起来，这时我们进行分支切换也就没有任何问题了 git stash list 查看暂存记录 当你把所有bug解决后就可以通过如下命令恢复，然后切换灰来继续做之前没做完的功能 git stash apply 将暂存区还原 git stash drop stash_id(可选，删除指定记录) 将之前最近的一次暂存记录删除， git stash pop 还原暂存区＋删除最近一次暂存记录 git stash clear 清空所有暂存区的记录 merge &amp; rebase 我们知道 merge 分支是合并的意思，我们在一个 featureA 分支开发完了一个功能，这个时候需要合并到主分支 master 上去，我们只需要进行如下操作： 12git checkout mastergit merge/rebase featureA rebase 和 merge 的区别 rebase 跟 merge 的区别你们可以理解成有两个书架，你需要把两个书架的书整理到一起去，第一种做法是 merge ，比较粗鲁暴力，就直接腾出一块地方把另一个书架的书全部放进去，虽然暴力，但是这种做法你可以知道哪些书是来自另一个书架的；第二种做法就是rebase ，他会把两个书架的书先进行比较，按照购书的时间来给他重新排序，然后重新放置好，这样做的好处就是合并之后的书架看起来很有逻辑，但是你很难清晰的知道哪些书来自哪个书架的。 也就是 经merge合并后的分支记录并不是只有主干一条，像小河流汇入大河一样，主干分支清晰可见，而经rebase 合并后的分支记录只有主干一条，分支是不可见的，所有分支按时间顺序汇入主干中。 总结：merge 来路可循但时间节点较乱，rebase时间节点清晰但来路不明 解决冲突：有conflit的时候git会智能提示，冲突的地方由 ==== 分出了上下两个部分，上部分一个叫HEAD 的字样代表是我当前所在分支的代码，下半部分是一个叫 baidu_activity 分支的代码，可以看到 HEAD 对 gradle 插件进行了升级，同时新增了一个插件，所以我们很容易判断哪些代码该保留，哪些代码该删除，我们只需要移除掉那些老旧代码，而且同时也要把那些&lt;&lt;&lt; HEAD、==== 以及 &gt;&gt;&gt;&gt;&gt;&gt;baidu_activity 这些标记符号也一并删除，最后进行一次commit 就ok了。","tags":[{"name":"编码工具","slug":"编码工具","permalink":"http://example.com/tags/%E7%BC%96%E7%A0%81%E5%B7%A5%E5%85%B7/"}]},{"title":"vim_operate","date":"2022-02-12T03:44:56.000Z","path":"2022/02/12/vim-operate/","text":"Vim基础操作指南 本文主要是介绍Vim的基本操作，不过当你能熟练使用这些操作以后，你的代码编写效率绝对会飞起，当然最后我也会介绍一些进阶读物，方便对VIm感兴趣的读者进一步了解。 写在前面：个人感觉 vscode + vim 绝配，yyds 1.移动光标 检查键盘是否为英文输入，且大写未锁定 基本操作： h左 j下 k上 l右 number+’w’ 将光标向前移动number个单词 number+’e’ 功能同上 数字0将光标移动到当前行首 ‘e’和’w’区别： ‘w’ 将光标从当前位置移动到下一个单词起始，且不包括起始字符 ‘e’ 将光标从当前位置移动到当前单词末尾 个人感觉具体使用时区别不会太大。。 2.Vim的保存和退出 键可以切换Vim的状态，从编辑状态切换到正常状态，然后输入 :q!不保存强制退出 :wq保存并退出 通过 vim + 文件名 + 回车便可以通过vim打开对应文件 3.文本编辑之删除 该操作在normal模式下 通过 ‘x’来删除掉光标所在字符 通过 ‘dd’ 来删除光标当前所在整行 通过 ‘dw’ 从光标处删除到一个单词的词末 通过 ‘d$’ 删除当前光标到行末 此处可以观察到 操作+操作对象 的使用规则，通过后面的计数操作，功能会更加强大，即 操作+number+操作对象 ‘d3w’删除三行 ‘2dd’ 删除两行 类比如上… 4.文本编辑之插入 以下操作均会进入编辑模式 通过 ‘i’在光标所在字母前面插入 通过 ‘a’在光标所在字母后面插入 通过 ‘A’在当前行的最后进行插入，此时光标在何位置并不重要 通过小写 ‘o’在当前光标的下一行插入，此时Vim进入编辑模式 通过大写 ‘O’在当前光标的上一行插入，此时VIm进入编辑模式 友情提示：键除了能带你会normal模式外，还能撤销一个你不想输入或者部分完整的命令 5.撤销类命令 ‘u’撤销最后执行的命令 ‘U’撤销对一行的操作 撤销以前的撤销命令，则通过 Ctrl+R 6.置入类命令 ‘p’可以配合删除命令来使用，该操作可以将已删除的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置于当前光标所在行的下一行。 7.替换+更改类命令 ‘r’和一个字符可以替换当前光标所在位置的字符，该操作只能一个一个替换 ‘R’可以连续替换多个字符，通过＜ＥＳＣ＞结束 ‘c’+对象 可以实现连续替换 ce 改变文本直到一个单词的末尾 同样也可以 ‘c’+number+motion 使用 查找替换： 只在当前行查找替换： :s/old/new 该命令只替换当前行的第一个old :s/old/new/g 该命令对当前行内的所有old进行替换 :s/old/new/gc 该命令对当前行内的所有old进行替换并询问，需要确认 在全文进行查找替换： 类比&lt;1&gt;，只需在’s’前加 ‘%’ :%s/old/new 只替换全文中的第一个old :%s/old/new/g 替换全文中的所有old :%s/old/new/gc 替换全文中的所有old并问询 8.定位及文件状态 Ctrl+g 组合键可以查看当前光标所在行的行号及文件状态信息 gg 可以跳转到第一行 G 可以跳转到文件最后一行 行号 + G 则可以跳转到指定行 9.搜索类命令 正向查找：输入 ‘/‘ (类似于’:’命令) ，然后输入 ’待查找字符串‘ ,回车即可 逆向查找：输入 ‘?’+’待查找字符串’,回车即可 上面两种情况连续查找： 若连续同上次方向查找则输入’n’,即正向查找下’n’为向下搜索，逆向查找下为向上搜索 若连续逆上次方向查找则输入’N’,即正向查找下’N’为向上搜索，逆向查找下为向下搜索 个人认为这两种用好一种就行了，容易混淆 10.配对括号的查找 输入 ‘%’ 可以配对 ）、 ]、} 在Vim内执行外部命令 ‘:!’+外部命令 便可以在Vim中执行外部命令 例如 ‘:!ls’ 便可以查看当前vim文件同目录下的文件列表 使用外部命令进行文件输出保存/读取写入 ‘v’命令可以使vim进入可视选取状态 ‘:w filname’可以将选中字段保存到 filename 文件中，可搭配 ‘v’命令使用 ‘:r filename’可以将外部filename中的内容写入到当前光标后面 例如 ‘:r !ls’ 可以将当前路径下的所有文件目录写入到光标后面 13.复制粘贴文本 通过 ‘y’ 复制文本， ‘p’粘贴文本 可搭配 ‘v’命令使用 ，如同前面所说，单独使用 ‘p’命令将粘贴最后一次删除文本到当前光标所在下一行 14.设置类命令选项： 输入 ‘:set xxx’ 可以设置xxx选项 ‘ic’ ‘ignorecase’ 查找时忽略字母大小写 ‘is’ ‘incsearch’ 查找短语时显示部分匹配 ‘hls’ ‘hlsearch’ 高亮显示所有的匹配短语 选项名可以用完整版本，也可以用缩略版本。 在选项前加上 no 可以关闭选项： :set noic 15.关于组合键命令的小结 ctrl + g 显示当前光标所在行号及文件状态 ctrl + D / 键进行自动补全 ctrl + o 返回光标上次所在位置，可多次返回","tags":[{"name":"编码工具","slug":"编码工具","permalink":"http://example.com/tags/%E7%BC%96%E7%A0%81%E5%B7%A5%E5%85%B7/"}]},{"title":"github+hexo 个人博客搭建","date":"2022-01-30T03:14:50.000Z","path":"2022/01/30/hexoblog/","text":"博客搭建要点及步骤 俺认为新建一个博客网站还是挺容易的，接下来总结下主要步骤要点 安装nodejs ，利用里面的hexo框架可以搭建博客 通过hexo初始化我们的博客仓库，也就是生成一个文件夹 source/_posts 文件夹下存放.md 格式的博客文章 themes 文件夹下存放主题 可以去github克隆喜欢的主题到该目录下，然后通过修改 _config.yaml 中 theme 字段为克隆主题生效！ 此时我们的网站只能在本地运行登录，接下俩需要挂载到github仓库中方可全网访问 网站修改后刷新生效命令123hexo clean hexo g #生成新网站，刷新 generatehexo s #启动服务器 server 可以给自己的博客加上评论功能，这样会高逼格一点 可以在畅言网站上免费注册z-blog功能，获取到appid 和 appsecret进入你的themes/对应主题,打开_config.yml，定位到 changyan ，把 enable 改为 true。 然后是修改如下1234changyan:enable: trueappid: 这里写上你的畅言在appidappkey: 这里写上你的畅言在appkey 然后刷新配置三件套就可以了！ 接下来就是将我们的网站挂载到github仓库上，这样任何人就能通过我们的网址来访问我们的网站了 首先创建名为xxx.github.io的github仓库，以后就可以通过 xxx.github.io 的网址来访问了 通过如下命令来关联本地markdown文件与远端github仓库1npm install hexo-deployer-git --save 打开配置文件_config.yml 配置git123deploy:type: gitrepo: https://github.com/xxx/xxxx.github.io.git 最后一步，将网站部署到github上去1hexo d 部署时报错的坑 报错信息如下：12345678910penSSL SSL_read: Connection was reset, errno 10054FATAL &#123; err: Error: Spawn failed at ChildProcess.&lt;anonymous&gt; (F:\\Blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21) at ChildProcess.emit (node:events:390:28) at ChildProcess.cp.emit (F:\\Blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29) at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123; code: 128 &#125;&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html 在最后一部hexo d时出现以上的错误，不要怀疑，是GitHub的服务器出毛病了！！！多尝试几次就欧克。*","tags":[{"name":"环境搭建、经验","slug":"环境搭建、经验","permalink":"http://example.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%81%E7%BB%8F%E9%AA%8C/"}]}]